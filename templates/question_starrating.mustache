{{!
    @template mod_questionnaire/question_starrating
    
    Star Rating question display template - Multiple rows support
}}
{{#qelements}}
<div class="qn-container star-rating-question">
    <div class="star-rating-table">
        {{#rows}}
        <div class="star-rating-row" data-choice-id="{{choiceid}}">
            <div class="star-rating-label">
                {{{content}}}
            </div>
            <div class="star-rating-stars">
                <input type="hidden" name="{{name}}" value="{{value}}" class="star-rating-value">
                {{#stars}}
                <span class="star {{#selected}}star-selected{{/selected}}" 
                      data-value="{{value}}" 
                      {{#disabled}}disabled{{/disabled}}
                      role="button" 
                      tabindex="0"
                      aria-label="{{value}} star(s)">
                    <i class="fa fa-star{{^selected}}-o{{/selected}}"></i>
                </span>
                {{/stars}}
                <span class="star-rating-text">(<span class="current-rating">{{value}}</span>/{{maxstars}})</span>
            </div>
        </div>
        {{/rows}}
    </div>
</div>
<script>
// 初始化星级评分 - 支持多行
(function() {
    var rows = document.querySelectorAll('.star-rating-row');
    
    rows.forEach(function(row) {
        var stars = row.querySelectorAll('.star:not([disabled])');
        var input = row.querySelector('.star-rating-value');
        var ratingText = row.querySelector('.current-rating');
        var currentValue = parseInt(input.value) || 0;
        
        // 初始化显示
        updateStars(stars, currentValue);
        
        // 点击处理
        stars.forEach(function(star) {
            star.addEventListener('click', function() {
                var value = parseInt(this.getAttribute('data-value'));
                if (currentValue === value) value = 0; // 允许取消
                currentValue = value;
                input.value = value;
                ratingText.textContent = value;
                updateStars(stars, value);
            });
            
            star.addEventListener('mouseenter', function() {
                updateStars(stars, parseInt(this.getAttribute('data-value')), true);
            });
        });
        
        row.querySelector('.star-rating-stars').addEventListener('mouseleave', function() {
            updateStars(stars, currentValue);
        });
    });
    
    function updateStars(stars, value, isHover) {
        stars.forEach(function(star, index) {
            var starValue = index + 1;
            var icon = star.querySelector('i');
            if (starValue <= value) {
                icon.className = 'fa fa-star';
                star.style.color = isHover ? '#ffa500' : '#ff9500';
            } else {
                icon.className = 'fa fa-star-o';
                star.style.color = '#ddd';
            }
        });
    }
})();
</script>
{{/qelements}}
